---
const defaultApiUrl = 'https://api.goldshore.org/v1';
const apiUrl = import.meta.env.PUBLIC_API_URL || defaultApiUrl;
const origin = new URL('.', apiUrl).origin;
const healthEndpoint = new URL('./health', apiUrl).toString();
const protectedEndpoint = new URL('.', apiUrl).toString();
const endpoints = [
  {
    id: 'health',
    label: 'Health check',
    endpoint: healthEndpoint,
    description: 'Expect 200 OK with permissive CORS headers.',
    expectedStatuses: ['200']
  },
  {
    id: 'protected',
    label: 'Protected endpoint',
    endpoint: protectedEndpoint,
    description: 'Expect 401 Unauthorized until authenticated via Access.',
    expectedStatuses: ['401']
  }
];
---
<div
  class="flex flex-col gap-4 rounded-2xl border border-border bg-background/80 p-4 text-sm text-muted"
  data-api-status
  data-api-origin={origin}
>
  <div class="flex items-center justify-between">
    <span class="font-semibold text-slate-900">API connectivity</span>
  </div>
  <p class="text-xs leading-5">
    We’re verifying connectivity with {origin}.
  </p>
  <div class="space-y-3" data-endpoint-list>
    {endpoints.map((endpoint) => (
      <div
        class="rounded-xl border border-border/80 bg-surface/60 p-3"
        data-endpoint-row
        data-endpoint={endpoint.endpoint}
        data-expected-statuses={endpoint.expectedStatuses.join(',')}
      >
        <div class="flex items-center justify-between gap-2">
          <div class="flex items-center gap-2">
            <span class="inline-flex h-2 w-2 rounded-full bg-slate-400" aria-hidden="true" data-status-dot></span>
            <span class="text-xs font-semibold uppercase tracking-[0.18em] text-slate-500">{endpoint.label}</span>
          </div>
          <span class="text-[11px] font-medium uppercase tracking-[0.2em]" data-status-text>Checking…</span>
        </div>
        <div class="mt-2 text-xs font-medium text-slate-900">
          <code class="rounded bg-background px-2 py-1 text-[11px]">{endpoint.endpoint}</code>
        </div>
        <p class="mt-2 text-[11px] leading-5 text-muted" data-status-message>
          {endpoint.description}
        </p>
      </div>
    ))}
  </div>
</div>
<script is:inline>
  const container = document.currentScript.previousElementSibling;
  const rows = container?.querySelectorAll('[data-endpoint-row]');

  if (!rows?.length) {
    console.warn('Missing endpoint rows for API status widget.');
  } else {
    rows.forEach((row) => {
      const endpoint = row.dataset.endpoint;
      if (!endpoint) {
        return;
      }

      const expected = (row.dataset.expectedStatuses || '')
        .split(',')
        .map((value) => value.trim())
        .filter(Boolean);

      const dot = row.querySelector('[data-status-dot]');
      const statusText = row.querySelector('[data-status-text]');
      const message = row.querySelector('[data-status-message]');

      fetch(endpoint, {
        mode: 'cors',
        credentials: 'omit',
        headers: {
          Accept: 'application/json'
        }
      })
        .then(async (response) => {
          const responseStatus = response.status.toString();
          const isExpected = expected.length ? expected.includes(responseStatus) : response.ok;

          if (dot) {
            dot.classList.remove('bg-slate-400', 'bg-emerald-500', 'bg-amber-500', 'bg-rose-500');
            dot.classList.add(isExpected ? 'bg-emerald-500' : response.ok ? 'bg-amber-500' : 'bg-rose-500');
          }

          if (statusText) {
            statusText.textContent = isExpected
              ? `Expected ${response.status}`
              : `Unexpected ${response.status}`;
          }

          if (message) {
            const corsHeader = response.headers.get('access-control-allow-origin');
            const corsMessage = corsHeader ? ` CORS: ${corsHeader}` : ' CORS header missing.';
            message.textContent = `${response.status} ${response.statusText}.${corsMessage}`;
          }
        })
        .catch((error) => {
          if (dot) {
            dot.classList.remove('bg-slate-400', 'bg-emerald-500', 'bg-amber-500');
            dot.classList.add('bg-rose-500');
          }
          if (statusText) {
            statusText.textContent = 'Offline';
          }
          if (message) {
            message.textContent = `Unable to reach API. ${error instanceof Error ? error.message : ''}`.trim();
          }
        });
    });
  }
</script>
